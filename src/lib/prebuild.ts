const fs = require('fs');
const path = require('path');
const axios = require('axios');

const GITHUB_API_URL = 'https://api.github.com';
const REPO_OWNER = process.env.REPO_OWNER || 'luyanfcp';
const REPO_NAME = process.env.REPO_NAME || 'note-snippet';
// ÈÖçÁΩÆGitHubÁî®Êà∑Âêç - Áî®‰∫éËé∑Âèñ‰∏™‰∫∫‰ø°ÊÅØÂíåREADME
const GITHUB_USERNAME = process.env.GITHUB_USERNAME || REPO_OWNER;
const DATA_DIR = path.join(process.cwd(), 'src', 'data');

// Áî®‰∫éÊ†áËÆ∞Â∫îËØ•ÂèëÂ∏ÉÁöÑÊñáÁ´†ÁöÑÊ†áÁ≠æÂêç
const RELEASE_TAG = "Release";

/**
 * Ëé∑ÂèñGitHub APIËØ∑Ê±ÇÈÖçÁΩÆ
 */
function getRequestConfig() {
  const config = {
    headers: { 'Accept': 'application/vnd.github.v3+json' }
  };
  
  if (process.env.GITHUB_TOKEN) {
    config.headers['Authorization'] = `token ${process.env.GITHUB_TOKEN}`;
    console.log('‰ΩøÁî®GitHub TokenËøõË°åAPIËØ∑Ê±Ç');
  }
  
  return config;
}

/**
 * Ëé∑ÂèñÊâÄÊúâGitHub Issues
 */
async function fetchAllIssues() {
  try {
    console.log(`üì• Ê≠£Âú®‰ªé ${REPO_OWNER}/${REPO_NAME} Ëé∑Âèñissues...`);
    
    const config = getRequestConfig();
    const response = await axios.get(
      `${GITHUB_API_URL}/repos/${REPO_OWNER}/${REPO_NAME}/issues?state=open&per_page=100`,
      config
    );
    
    if (response.status !== 200) {
      throw new Error(`Ëé∑ÂèñIssuesÂ§±Ë¥•: ${response.statusText}`);
    }
    
    const issues = response.data;
    console.log(`‚úÖ ÊàêÂäüËé∑Âèñ ${issues.length} ÁØáÊñáÁ´†`);
    
    return issues.map((issue) => ({
      id: issue.number,
      title: issue.title,
      body: issue.body,
      created_at: issue.created_at,
      updated_at: issue.updated_at,
      labels: issue.labels,
      user: {
        login: issue.user.login,
        avatar_url: issue.user.avatar_url
      }
    }));
  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñIssuesÂ§±Ë¥•:', error.message);
    if (error.response) {
      console.error('ÂìçÂ∫îÁä∂ÊÄÅ:', error.response.status);
      console.error('ÂìçÂ∫îÊï∞ÊçÆ:', error.response.data);
    }
    return [];
  }
}

/**
 * Ëé∑ÂèñGitHubÁî®Êà∑‰ø°ÊÅØ
 */
async function fetchGithubUser() {
  try {
    console.log(`üì• Ê≠£Âú®Ëé∑Âèñ ${GITHUB_USERNAME} ÁöÑÁî®Êà∑‰ø°ÊÅØ...`);
    
    const config = getRequestConfig();
    const response = await axios.get(
      `${GITHUB_API_URL}/users/${GITHUB_USERNAME}`,
      config
    );
    
    if (response.status !== 200) {
      throw new Error(`Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•: ${response.statusText}`);
    }
    
    console.log(`‚úÖ ÊàêÂäüËé∑Âèñ ${GITHUB_USERNAME} ÁöÑÁî®Êà∑‰ø°ÊÅØ`);
    return response.data;
  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:', error.message);
    if (error.response) {
      console.error('ÂìçÂ∫îÁä∂ÊÄÅ:', error.response.status);
      console.error('ÂìçÂ∫îÊï∞ÊçÆ:', error.response.data);
    }
    
    // ËøîÂõûÈªòËÆ§Áî®Êà∑‰ø°ÊÅØ
    return {
      login: GITHUB_USERNAME,
      name: GITHUB_USERNAME,
      avatar_url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png',
      html_url: `https://github.com/${GITHUB_USERNAME}`,
      bio: '',
      blog: '',
      location: '',
      company: '',
      twitter_username: '',
      public_repos: 0,
      followers: 0,
      following: 0
    };
  }
}

/**
 * Ëé∑ÂèñÁî®Êà∑ÁöÑREADMEÂÜÖÂÆπ
 */
async function fetchUserReadme() {
  try {
    console.log(`üì• Ê≠£Âú®Ëé∑Âèñ ${GITHUB_USERNAME} ÁöÑREADMEÂÜÖÂÆπ...`);
    
    const config = getRequestConfig();
    // GitHubÁî®Êà∑READMEÈÄöÂ∏∏Âú®Áî®Êà∑ÂêåÂêç‰ªìÂ∫ìÁöÑREADME.mdÊñá‰ª∂‰∏≠
    const response = await axios.get(
      `${GITHUB_API_URL}/repos/${GITHUB_USERNAME}/${GITHUB_USERNAME}/readme`,
      config
    );
    
    if (response.status !== 200) {
      throw new Error(`Ëé∑ÂèñREADMEÂ§±Ë¥•: ${response.statusText}`);
    }
    
    // GitHub APIËøîÂõûÁöÑÂÜÖÂÆπÊòØBase64ÁºñÁ†ÅÁöÑ
    const readme = Buffer.from(response.data.content, 'base64').toString('utf-8');
    console.log(`‚úÖ ÊàêÂäüËé∑Âèñ ${GITHUB_USERNAME} ÁöÑREADMEÂÜÖÂÆπ`);
    return readme;
  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñREADMEÂÜÖÂÆπÂ§±Ë¥•:', error.message);
    if (error.response) {
      console.error('ÂìçÂ∫îÁä∂ÊÄÅ:', error.response.status);
      console.error('ÂìçÂ∫îÊï∞ÊçÆ:', error.response.data);
    }
    return '# ÂÖ≥‰∫éÊàë\nÊöÇÊó†‰∏™‰∫∫‰ªãÁªç‰ø°ÊÅØ„ÄÇ';
  }
}

/**
 * ‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØÂíåREADMEÂÜÖÂÆπ
 */
async function saveUserInfo() {
  try {
    // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂíåREADME
    const [user, readme] = await Promise.all([
      fetchGithubUser(),
      fetchUserReadme()
    ]);
    
    // ÂàõÂª∫Áî®Êà∑‰ø°ÊÅØÂØπË±°
    const userInfo = {
      login: user.login,
      name: user.name || user.login,
      avatar_url: user.avatar_url,
      html_url: user.html_url,
      bio: user.bio || '',
      blog: user.blog || '',
      location: user.location || '',
      company: user.company || '',
      twitter_username: user.twitter_username || '',
      public_repos: user.public_repos || 0,
      followers: user.followers || 0,
      following: user.following || 0,
      readme_content: readme
    };
    
    // ‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØÂà∞Êñá‰ª∂
    fs.writeFileSync(
      path.join(DATA_DIR, 'user-info.json'),
      JSON.stringify(userInfo, null, 2)
    );
    
    console.log(`üìä Áî®Êà∑‰ø°ÊÅØÂíåREADMEÂ∑≤‰øùÂ≠òÂà∞ user-info.json`);
    return userInfo;
  } catch (error) {
    console.error('‚ùå ‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:', error);
    
    // ÂàõÂª∫ÈªòËÆ§Áî®Êà∑‰ø°ÊÅØ
    const defaultUserInfo = {
      login: GITHUB_USERNAME,
      name: GITHUB_USERNAME,
      avatar_url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png',
      html_url: `https://github.com/${GITHUB_USERNAME}`,
      bio: '',
      blog: '',
      location: '',
      company: '',
      twitter_username: '',
      public_repos: 0,
      followers: 0,
      following: 0,
      readme_content: '# ÂÖ≥‰∫éÊàë\nÊöÇÊó†‰∏™‰∫∫‰ªãÁªç‰ø°ÊÅØ„ÄÇ'
    };
    
    // ‰øùÂ≠òÈªòËÆ§Áî®Êà∑‰ø°ÊÅØÂà∞Êñá‰ª∂
    fs.writeFileSync(
      path.join(DATA_DIR, 'user-info.json'),
      JSON.stringify(defaultUserInfo, null, 2)
    );
    
    console.log(`‚ö†Ô∏è Â∑≤ÂàõÂª∫ÈªòËÆ§Áî®Êà∑‰ø°ÊÅØÊñá‰ª∂ user-info.json`);
    return defaultUserInfo;
  }
}

/**
 * ‰øùÂ≠òÊâÄÊúâÊñáÁ´†ÂÜÖÂÆπÂà∞‰∏Ä‰∏™ÂÆåÊï¥ÁöÑÊï∞ÊçÆÊñá‰ª∂
 */
async function savePrebuildData() {
  try {
    // Á°Æ‰øùÊï∞ÊçÆÁõÆÂΩïÂ≠òÂú®
    if (!fs.existsSync(DATA_DIR)) {
      fs.mkdirSync(DATA_DIR, { recursive: true });
    }
    
    // Ëé∑ÂèñÊâÄÊúâÊñáÁ´†
    const allIssues = await fetchAllIssues();
    
    if (allIssues.length === 0) {
      console.warn('‚ö†Ô∏è Ê≤°ÊúâËé∑ÂèñÂà∞‰ªª‰ΩïÊñáÁ´†');
      
      // ÂàõÂª∫Á©∫ÁöÑÊï∞ÊçÆÊñá‰ª∂Ôºå‰ª•Á°Æ‰øùÊûÑÂª∫‰∏ç‰ºöÂ§±Ë¥•
      fs.writeFileSync(path.join(DATA_DIR, 'all-content.json'), JSON.stringify([], null, 2));
      fs.writeFileSync(path.join(DATA_DIR, 'posts.json'), JSON.stringify([], null, 2));
      fs.writeFileSync(path.join(DATA_DIR, 'tags.json'), JSON.stringify([], null, 2));
    } else {
      console.log(`üìä ÂÖ±Ëé∑ÂèñÂà∞ ${allIssues.length} ÁØáÊñáÁ´†`);
      
      // ËøáÊª§Âá∫ÊúâReleaseÊ†áÁ≠æÁöÑÊñáÁ´†
      const posts = allIssues.filter(post => 
        post.labels?.some(label => label.name === RELEASE_TAG)
      );
      
      console.log(`üìä ÂÖ∂‰∏≠ ${posts.length} ÁØáÊñáÁ´†Ê†áËÆ∞‰∏∫Â∑≤ÂèëÂ∏É (Âê´Êúâ"${RELEASE_TAG}"Ê†áÁ≠æ)`);
      
      // ÊèêÂèñÊâÄÊúâÊ†áÁ≠æÂπ∂ËÆ°Êï∞Ôºå‰ΩÜÂè™‰ªéÂ∑≤ÂèëÂ∏ÉÁöÑÊñáÁ´†‰∏≠ÊèêÂèñ
      const tagsMap = new Map();
      posts.forEach(post => {
        post.labels?.forEach(label => {
          // ÊéíÈô§ReleaseÊ†áÁ≠æÊú¨Ë∫´
          if (label.name !== RELEASE_TAG) {
            const name = label.name.toLowerCase();
            tagsMap.set(name, (tagsMap.get(name) || 0) + 1);
          }
        });
      });
      
      const tags = Array.from(tagsMap.entries())
        .map(([name, count]) => ({ name, count }))
        .sort((a, b) => b.count - a.count);
      
      // ÂáÜÂ§áÊØèÁØáÊñáÁ´†ÁöÑÊëòË¶Å‰ø°ÊÅØÔºåÂè™‰∏∫Â∑≤ÂèëÂ∏ÉÁöÑÊñáÁ´†ÂáÜÂ§á
      const postsWithExcerpts = posts.map(post => {
        // ËÆ°ÁÆóÊëòË¶Å
        const excerpt = post.body ? 
          post.body.substring(0, 200).replace(/[#*`]/g, '').trim() + '...' : 
          '';
        
        return {
          id: post.id,
          title: post.title,
          excerpt: excerpt,
          created_at: post.created_at,
          updated_at: post.updated_at,
          labels: post.labels,
          user: post.user
        };
      });
      
      // ‰øùÂ≠òÊâÄÊúâÊñáÁ´†ÂÜÖÂÆπÔºåÂåÖÊã¨Êú™ÂèëÂ∏ÉÁöÑÔºàall-content.json ‰øùÁïôÊâÄÊúâÊñáÁ´†Êñπ‰æøÁÆ°ÁêÜÔºâ
      fs.writeFileSync(
        path.join(DATA_DIR, 'all-content.json'),
        JSON.stringify(allIssues, null, 2)
      );
      
      // Âè™‰øùÂ≠òÂ∑≤ÂèëÂ∏ÉÊñáÁ´†ÁöÑÊëòË¶ÅÂàóË°®
      fs.writeFileSync(
        path.join(DATA_DIR, 'posts.json'),
        JSON.stringify(postsWithExcerpts, null, 2)
      );
      
      // Âè™‰øùÂ≠òÂ∑≤ÂèëÂ∏ÉÊñáÁ´†ÁöÑÊ†áÁ≠æ
      fs.writeFileSync(
        path.join(DATA_DIR, 'tags.json'),
        JSON.stringify(tags, null, 2)
      );
      
      console.log(`üìä È¢ÑÊûÑÂª∫Êï∞ÊçÆÂ∑≤‰øùÂ≠ò:`);
      console.log(`  - ${allIssues.length} ÁØáÊñáÁ´†ÁöÑÂÆåÊï¥ÂÜÖÂÆπÂ∑≤‰øùÂ≠òÂà∞ all-content.json`);
      console.log(`  - ${postsWithExcerpts.length} ÁØáÂ∑≤ÂèëÂ∏ÉÊñáÁ´†ÁöÑÊëòË¶Å‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞ posts.json`);
      console.log(`  - ${tags.length} ‰∏™Ê†áÁ≠æ‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞ tags.json`);
    }
    
    // Ëé∑ÂèñÂπ∂‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØ
    await saveUserInfo();
    
    console.log('‚ú® ÊâÄÊúâÊï∞ÊçÆÈ¢ÑÊûÑÂª∫ÂÆåÊàê');
  } catch (error) {
    console.error('‚ùå È¢ÑÊûÑÂª∫Êï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•:', error);
    throw error;
  }
}

// Â¶ÇÊûúÁõ¥Êé•ÊâßË°åÊ≠§Êñá‰ª∂ÔºåÂàôÊâßË°åÈ¢ÑÊûÑÂª∫
if (require.main === module) {
  savePrebuildData()
    .then(() => console.log('‚ú® È¢ÑÊûÑÂª∫ÊàêÂäüÂÆåÊàê'))
    .catch(err => {
      console.error('‚ùå È¢ÑÊûÑÂª∫Â§±Ë¥•:', err);
      process.exit(1);
    });
}

// Export functions for use in other files
module.exports = {
  fetchAllIssues,
  fetchGithubUser,
  fetchUserReadme,
  saveUserInfo,
  savePrebuildData
};
